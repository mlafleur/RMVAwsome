// Code generated by Microsoft (R) AutoRest Code Generator 0.9.6.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using RMV.Awesome.Api;
using RMV.Awesome.Api.Models;

namespace RMV.Awesome.Api
{
    public static partial class BranchOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the RMV.Awesome.Api.IBranchOperations.
        /// </param>
        public static IList<Branch> GetBranchList(this IBranchOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBranchOperations)s).GetBranchListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the RMV.Awesome.Api.IBranchOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Branch>> GetBranchListAsync(this IBranchOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<RMV.Awesome.Api.Models.Branch>> result = await operations.GetBranchListWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the RMV.Awesome.Api.IBranchOperations.
        /// </param>
        /// <param name='lat'>
        /// Required.
        /// </param>
        /// <param name='lng'>
        /// Required.
        /// </param>
        public static IList<Branch> GetBranchListDistance(this IBranchOperations operations, double lat, double lng)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBranchOperations)s).GetBranchListDistanceAsync(lat, lng);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the RMV.Awesome.Api.IBranchOperations.
        /// </param>
        /// <param name='lat'>
        /// Required.
        /// </param>
        /// <param name='lng'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Branch>> GetBranchListDistanceAsync(this IBranchOperations operations, double lat, double lng, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<RMV.Awesome.Api.Models.Branch>> result = await operations.GetBranchListDistanceWithOperationResponseAsync(lat, lng, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
